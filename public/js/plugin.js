// Generated by CoffeeScript 1.3.1

define(function() {
  return (function($) {
    var isEmpty;
    $.fn.plugin = function(x) {
      if (x) {
        return this.addClass("plugin " + x);
      } else {
        return this.hasClass("plugin");
      }
    };
    $.fn.refresh = function(cb) {
      if (typeof cb === 'function') {
        this.bind('_', function(e, action) {
          var ret;
          if (action !== 'show_tab') {
            ret = cb.apply($(this), Array.prototype.slice.call(arguments, 1));
          }
          if (ret === false) {
            return false;
          }
          if (e.isPropagationStopped()) {
            return $(this).parent().trigger('_', ['show_tab']);
          }
        });
      } else {
        this.triggerHandler('_');
      }
      return this;
    };
    $.fn.succeeded = function() {
      this.find('.loading, .failed').remove();
      return this;
    };
    $.fn.loading = function(tag) {
      return this.succeeded().append($('<span>').addClass('loading').text("Loading " + tag + "..."));
    };
    $.fn.failed = function(tag) {
      if (tag) {
        return this.succeeded().append($('<span>').addClass('failed').text("Failed to get " + tag + ". Try again."));
      } else {
        return this.find('.failed').length;
      }
    };
    this.isEmpty = isEmpty = function(o) {
      var p;
      return !((function() {
        var _results;
        _results = [];
        for (p in o) {
          _results.push(1);
        }
        return _results;
      })()).length;
    };
    $.fn.parallel = function(usage, o, cb) {
      var _this = this;
      this.loading(usage);
      return parallel(o).next(function(res) {
        var k;
        for (k in o) {
          if (res.k instanceof Error) {
            return _this.failed(usage);
          }
        }
        return cb.call(_this.succeeded(), res);
      }).error(function() {
        if (!_this.failed()) {
          return _this.failed(usage);
        }
      });
    };
    $.fn.serializeObject = function() {
      var o, x, _i, _len, _ref;
      o = {};
      _ref = this.serializeArray();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        if (o[x.name] == null) {
          o[x.name] = x.value;
        } else {
          if (!$.isArray(o[x.name])) {
            o[x.name] = [o[x.name]];
          }
          o[x.name].push(x.value);
        }
      }
      return o;
    };
    return this;
  })(jQuery);
});
