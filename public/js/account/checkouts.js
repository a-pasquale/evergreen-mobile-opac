// Generated by CoffeeScript 1.3.1

define(['eg/eg_api', 'template', 'plugin'], function(eg, _) {
  return (function($) {
    var $plugin, content, mmddyy, pad, renew, show_info_line, show_status_line, tpl_item;
    content = '<form>\n  <fieldset data-role="controlgroup" />\n  <div data-role="controlgroup" data-type="horizontal">\n    <span class="renew some"><button type="submit">Renew selected items</button></span>\n    <span class="renew all"><button type="submit">Renew all</button></span>\n  </div>\n</form>';
    tpl_item = function(type) {
      var x;
      x = type === 'out' ? '<div class="my_checkout" id="circ_id_<%= circ_id %>">\n  <input type="checkbox" name="copy_id" value="<%= circ_id %>" id="checkbox_<%= circ_id %>" />\n  <label for="checkbox_<%= circ_id %>">\n    <span class="info_line">\n      <span class="title" />\n      <span class="types" />\n      <br />\n      <span class="author" />\n    </span>\n    <br />\n    <span class="status_line">\n      Due date <span class="due_date" />\n      Renews left <span class="remaining_renewals" />\n    </span>\n  </label>\n</div>' : '<div class="my_checkout" id="circ_id_<%= circ_id %>">\n  <input type="checkbox" name="copy_id" value="<%= circ_id %>" id="checkbox_<%= circ_id %>" />\n  <label for="checkbox_<%= circ_id %>">\n    <span class="info_line">\n      <span class="title" />\n      <span class="types" />\n      <br />\n      <span class="author" />\n    </span>\n    <br />\n    <span class="status_line">\n      <span class="copy_status"><%= circ_type %></span>\n      Due date <span class="due_date" />\n      Renews left <span class="remaining_renewals" />\n    </span>\n  </label>\n</div>';
      return _.template(x);
    };
    show_info_line = function(mvr) {
      if (mvr.title) {
        $('.title', this).text(mvr.title);
      }
      if (mvr.author) {
        $('.author', this).text("" + mvr.author);
      }
      if (mvr.types_of_resource) {
        return $('.types', this).text("" + (mvr.types_of_resource.join(', ')));
      }
    };
    pad = function(x) {
      if (x < 10) {
        return '0' + x;
      } else {
        return x;
      }
    };
    mmddyy = function(x) {
      return "" + (pad(x.getMonth() + 1)) + "/" + (pad(x.getDate())) + "/" + (pad(x.getFullYear()));
    };
    show_status_line = function(circ) {
      $('.due_date', this).text(mmddyy(circ.due_date));
      $('.remaining_renewals', this).text(circ.renewal_remaining);
      return $('input:checkbox', this).val(circ.target_copy);
    };
    $plugin = {};
    renew = function(xid) {
      $plugin.refresh().publish('account.checkouts_summary');
      return eg.openils('circ.renew', parseInt(xid), function(result) {
        return $plugin.refresh().publish('account.checkouts_summary');
      });
    };
    return $.fn.checkouts = function() {
      $plugin = this.plugin('acct_checkouts').trigger('create');
      console.log("in checkouts");
      this.refresh = function() {
        console.log("refreshing");
        this.html(content).trigger('create');
        $('fieldset', this).openils('checkout details', 'actor.user.checked_out.authoritative', function(co) {
          var $item, checkouts, circ_id, type, _results;
          $plugin.publish('account.items_checked_out', [co]);
          _results = [];
          for (type in co) {
            checkouts = co[type];
            _results.push((function() {
              var _i, _len, _results1;
              _results1 = [];
              for (_i = 0, _len = checkouts.length; _i < _len; _i++) {
                circ_id = checkouts[_i];
                this.prepend($item = $((tpl_item(type))({
                  circ_id: circ_id,
                  circ_type: type
                })));
                _results1.push((function(type, $item) {
                  return $('.status_line', $item).openils("checkout status for #" + circ_id, 'circ.retrieve.authoritative', circ_id, function(circ) {
                    show_status_line.call($item, circ);
                    $('.info_line', $item).openils("title info for #" + circ.target_copy, 'search.biblio.mods_from_copy', circ.target_copy, function(mvr) {
                      return show_info_line.call($item, mvr);
                    });
                    if (type !== 'out') {
                      $item.addClass('ui-page-theme-b');
                    }
                    if (circ.renewal_remaining === 0) {
                      console.log($item);
                      $item.find('.ui-checkbox').addClass('ui-state-disabled');
                      $item.find(':checkbox').prop('disabled', true);
                    }
                    if (type === 'out' && circ.renewal_remaining > 0) {
                      if ($renew_all.is(':visible')) {
                        $renew_some.show();
                      } else {
                        $renew_all.show();
                      }
                    }
                    return $plugin.trigger('create');
                  });
                })(type, $item));
              }
              return _results1;
            }).call(this));
          }
          return _results;
        });
        return false;
      };
      this.refresh();
      this.on('click', '.renew.some', function() {
        var xid, xids, _i, _len;
        xids = $(this).closest('form').serializeArray();
        if (xids.length) {
          for (_i = 0, _len = xids.length; _i < _len; _i++) {
            xid = xids[_i];
            renew(xid.value);
          }
        } else {
          $(this).publish('notice', ['Nothing was done because no items were selected.']);
        }
        return false;
      });
      return this.on('click', '.renew.all', function() {
        var $xs;
        $xs = $(this).closest('form').find('input:checkbox:enabled');
        if ($xs.length) {
          $xs.each(function() {
            return renew($(this).val());
          });
        } else {
          $(this).publish('notice', ['Nothing was done because no items can be renewed.']);
        }
        return false;
      });
    };
  })(jQuery);
});
