// Generated by CoffeeScript 1.3.1

define(['eg/eg_api', 'template', 'plugin'], function(eg, _) {
  return (function($) {
    var $plugin, cancel, content, mmyydd, pad, tpl_info_line, tpl_item, tpl_status_line, update;
    content = '<form>\n  <fieldset data-role="controlgroup" />\n  <div data-role="controlgroup" data-type="horizontal">\n    <span class="cancel some"><button type="submit">Cancel selected holds</button></span>\n    <span class="cancel all"><button type="submit">Cancel all</button></span>\n    <span class="suspend some"><button type="submit">Suspend selected holds</button></span>\n    <span class="suspend all"><button type="submit">Suspend all</button></span>\n    <span class="resume some"><button type="submit">Activate selected holds</button></span>\n    <span class="resume all"><button type="submit">Activate all</button></span>\n  </div>\n</form>';
    tpl_item = _.template('<div class="my_hold" id="hold_id_<%= hold_id %>">\n  <input type="checkbox" name="hold_id" value="<%= hold_id %>" id="checkbox_<%= hold_id %>" />\n  <label for="checkbox_<%= hold_id %>">\n    <span class="info_line" />\n    <br />\n    <span class="status_line" />\n  </label>\n</div>');
    tpl_info_line = _.template('<span class="title"> <%= title %> </span>\n<span class="types"> <%= types %> </span>\n<br />\n<span class="author"> <%= author %> </span>');
    tpl_status_line = function(o) {
      var a, b, c, d;
      a = o.status === 'Ready for Pickup' ? (b = '<span><strong><%= status %></strong> at <%= pickup %></span>', c = o.hold.shelf_time ? '<span>Expires on <strong><%= shelf %></strong></span>' : '', '<div>' + b + '</div><div>' + c + '</div>') : o.status === 'In transit' ? (b = '<span><%= status %></span>', c = '<span>Pick up at <%= pickup %></span>', d = o.hold.shelf_time ? '<span>Expires on <strong><%= shelf %></strong></span>' : '', '<div>' + b + '<div></div>' + c + '</div>') : (b = o.queue_position && o.potential_copies ? '<span>Position <%= posn %> of <%= total %></span>' : '', c = o.potential_copies === 1 ? '<span><%= avail %> copy available</span>' : o.potential_copies > 1 ? '<span><%= avail %> copies available</span>' : '', d = '<span>Pick up at <%= pickup %></span>\n<span>Expires on <%= expire %></span>', '<div>' + b + c + '</div><div>' + d + '</div>');
      return _.template(a);
    };
    pad = function(x) {
      if (x < 10) {
        return '0' + x;
      } else {
        return x;
      }
    };
    mmyydd = function(x) {
      return "" + (pad(x.getMonth() + 1)) + "/" + (pad(x.getDate())) + "/" + (pad(x.getFullYear()));
    };
    $plugin = {};
    cancel = function(hold) {
      return eg.openils('circ.hold.cancel', hold, function(status) {
        if (status === 1) {
          $plugin.refresh().publish('account.holds_summary');
        } else {
          return $().publish('prompt', ['Hold was not cancelled', status]);
        }
      });
    };
    update = function(hold) {
      var hold_id;
      hold_id = hold.id;
      return eg.openils('circ.hold.update', hold, function(id) {
        if (id === hold_id) {
          $plugin.refresh().publish('account.holds_summary');
          return id;
        } else {
          $().publish('prompt', ['Hold was not updated', id]);
        }
      });
    };
    return $.fn.holds = function() {
      var holds, update_all, update_some;
      $plugin = this.plugin('acct_holds').trigger('create');
      holds = [];
      this.refresh(function() {
        var $cancel, $list, $resume, $suspend, show_buttons, show_buttons_for,
          _this = this;
        console.log("refreshing holds");
        this.html(content).trigger('create');
        $cancel = $('.cancel', this).hide();
        $suspend = $('.suspend', this).hide();
        $resume = $('.resume', this).hide();
        show_buttons_for = function($s) {
          var $all, $some;
          $some = $s.filter('.some');
          $all = $s.filter('.all');
          return ($all.css('display') === 'none' ? $all : $some).show();
        };
        show_buttons_for($cancel);
        show_buttons = function(frozen) {
          show_buttons_for(frozen ? $resume : $suspend);
          show_buttons_for($cancel);
        };
        $list = $('fieldset', this);
        $list.parallel('holds list', {
          ids: eg.openils('circ.holds.id_list.retrieve.authoritative'),
          ouTree: eg.openils('actor.org_tree.retrieve')
        }, function(x) {
          var $item, id, _i, _len, _ref, _results;
          _ref = x.ids;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            id = _ref[_i];
            $list.append($item = $(tpl_item({
              hold_id: id
            })));
            _results.push((function($item) {
              return $item.openils("holds details #" + id, 'circ.hold.details.retrieve.authoritative', id, function(o) {
                holds.push(o.hold);
                $('.info_line', $item).append(tpl_info_line({
                  title: (o.mvr.title ? o.mvr.title : void 0),
                  author: (o.mvr.author ? "" + o.mvr.author : void 0),
                  types: (o.mvr.types_of_resource ? "" + (o.mvr.types_of_resource.join(', ')) : void 0)
                }));
                $('.status_line', $item).append((tpl_status_line(o))({
                  status: (o.status ? o.status : void 0),
                  posn: o.queue_position,
                  total: o.total_holds,
                  avail: o.potential_copies,
                  pickup: (o.hold.pickup_lib ? "" + x.ouTree[o.hold.pickup_lib].name : void 0),
                  expire: o.hold.expire_time ? "" + (mmyydd(o.hold.expire_time)) : '',
                  shelf: o.hold.shelf_time ? "" + (mmyydd(o.hold.shelf_time)) : ''
                }));
                $('input, .info_line, .status_line', $item).addClass(o.hold.frozen ? 'inactive' : 'active');
                show_buttons(o.hold.frozen);
                return $plugin.trigger('create');
              });
            })($item));
          }
          return _results;
        });
        return false;
      });
      this.refresh();
      this.on('click', '.cancel.some', function() {
        var xid, xids, _i, _len;
        xids = $(this).closest('form').serializeArray();
        if (xids.length) {
          for (_i = 0, _len = xids.length; _i < _len; _i++) {
            xid = xids[_i];
            cancel(xid.value);
          }
        } else {
          $(this).publish('notice', ['Nothing was done because no holds were selected.']);
        }
        return false;
      });
      this.on('click', '.suspend.some', update_some = function() {
        var hold, suspend, xid, xids, _i, _j, _len, _len1;
        suspend = $(this).hasClass('suspend');
        xids = $(this).closest('form').serializeArray();
        if (xids.length) {
          for (_i = 0, _len = xids.length; _i < _len; _i++) {
            xid = xids[_i];
            for (_j = 0, _len1 = holds.length; _j < _len1; _j++) {
              hold = holds[_j];
              if (!(hold.id === parseInt(xid.value))) {
                continue;
              }
              hold.frozen = suspend;
              update(hold);
              break;
            }
          }
        } else {
          $(this).publish('notice', ['Nothing was done because no holds were selected.']);
        }
        return false;
      });
      this.on('click', '.resume.some', update_some);
      this.on('click', '.cancel.all', function() {
        var $xs;
        $xs = $(this).closest('form').find('input:checkbox');
        if ($xs.length) {
          $xs.each(function() {
            return cancel($(this).val());
          });
        } else {
          $(this).publish('notice', ['Nothing was done because no holds can be cancelled.']);
        }
        return false;
      });
      this.on('click', '.suspend.all', update_all = function() {
        var $xs, suspend;
        suspend = $(this).hasClass('suspend');
        $xs = $(this).closest('form').find(".my_hold " + (suspend ? '.active' : '.inactive')).closest('input:checkbox');
        if ($xs.length) {
          $xs.each(function() {
            var hold, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = holds.length; _i < _len; _i++) {
              hold = holds[_i];
              if (!(hold.id === parseInt($(this).val()))) {
                continue;
              }
              hold.frozen = suspend;
              update(hold);
              break;
            }
            return _results;
          });
        } else {
          $(this).publish('notice', suspend ? ['Nothing was done because no active holds were found to suspend.'] : ['Nothing was done because no suspended holds were found to activate.']);
        }
        return false;
      });
      return this.on('click', '.resume.all', update_all);
    };
  })(jQuery);
});
