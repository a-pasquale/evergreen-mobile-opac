// Generated by CoffeeScript 1.3.1

define(['eg/eg_api'], function(eg) {
  return (function($) {
    var OU_tree, OU_tree_desc, OU_types, defaults, id_name, name_ou, ol_depth, ol_id, ou_depth;
    defaults = {
      name: 'org_unit',
      all: true,
      indent: '. ',
      selected: 0,
      focus: false
    };
    OU_tree = {};
    OU_tree_desc = {};
    OU_types = {};
    id_name = function(ou_id) {
      var _ref;
      return ((_ref = OU_tree[ou_id]) != null ? _ref.name : void 0) || '';
    };
    name_ou = function(ou_name) {
      var id, ou;
      ou_name = ou_name.toUpperCase();
      for (id in OU_tree) {
        ou = OU_tree[id];
        if (ou.shortname === ou_name) {
          return ou;
        }
      }
    };
    ou_depth = function(ou) {
      return OU_types[ou.ou_type].depth;
    };
    ol_id = function(ol) {
      var id, _ref;
      if (!isNaN((id = Number(ol)))) {
        if (id_name(id)) {
          return id;
        } else {
          return 1;
        }
      } else {
        return ((_ref = name_ou(ol)) != null ? _ref.id : void 0) || 1;
      }
    };
    ol_depth = function(ol) {
      var id;
      if (!isNaN((id = Number(ol)))) {
        return ou_depth(OU_tree[id]);
      } else {
        return ou_depth(name_ou(ol));
      }
    };
    $.fn.ou_tree = function(o) {
      var rc,
        _this = this;
      rc = $.extend({}, defaults, o);
      eg.openils('actor.org_tree.retrieve', function(ouTree) {
        var ou_id, _ref;
        OU_tree = ouTree;
        if (((_ref = window.query) != null ? _ref.ol : void 0) != null) {
          ou_id = ol_id(window.query.ol);
        }
        _this.parallel('organization list', {
          ouTree: eg.openils('actor.org_tree.descendants.retrieve', ou_id),
          ouTypes: eg.openils('actor.org_types.retrieve')
        }, function(x) {
          var $option, $select, options, ou, ou_name, ou_type, type, _i, _j, _len, _len1, _ref1;
          OU_tree_desc = x.ouTree;
          OU_types = x.ouTypes;
          options = [];
          _ref1 = x.ouTree;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ou = _ref1[_i];
            ou_name = [];
            ou_type = type = x.ouTypes[ou.ou_type];
            while (type) {
              if (type.id === 1) {
                break;
              }
              ou_name.push(rc.indent);
              type = x.ouTypes[type.parent];
            }
            ou_name.push(ou.name);
            ou_name = ou_name.join('');
            $option = rc.all ? $('<option>').text(ou_name) : !ou_type.can_have_users || ou_type.can_have_users === 'f' ? $('<optgroup>') : $('<option>').text(ou_name);
            options.push($option.prop({
              label: ou_name,
              value: ou.id
            }));
          }
          $select = $('<select data-native-menu="false">').prop('name', rc.name);
          for (_j = 0, _len1 = options.length; _j < _len1; _j++) {
            x = options[_j];
            $select.append(x);
          }
          if (rc.selected) {
            if (isNaN(rc.selected)) {
              $select.children().first().text(rc.selected);
            } else {
              $select.children().each(function() {
                if (Number($(this).val()) === rc.selected) {
                  $(this).prop('selected', 'selected');
                  return false;
                }
              });
            }
          }
          if (rc.focus) {
            $select.focus();
          }
          this.append($select);
          return $select.parent().trigger('create');
        });
      });
      return this;
    };
    return {
      id: ol_id,
      id_depth: ol_depth,
      id_name: id_name
    };
  })(jQuery);
});
