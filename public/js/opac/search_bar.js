// Generated by CoffeeScript 1.3.1

define(['eg/eg_api', 'plugin', 'opac/ou_tree'], function(eg) {
  return ((function() {
    return function($) {
      var build_options, defaults, flip_to, reset_search_form, search_form, settings;
      search_form = '<form class="search_form_advanced">\n	<div data-role="fieldcontain" class="search term">\n		<div class="basic search row">\n			<fieldset class="search row">\n				<input type="search" name="term" value="" />\n				<select name="default_class" data-native-menu="false" />\n			</fieldset>\n		</div>\n\n		<div class="advanced search row">\n		<fieldset data-role="controlgroup">\n			<legend>Search terms</legend>\n			<fieldset class="search row">\n				<button data-role="none" type="button" title="Delete this search row" class="delete">-</button>\n				<select data-role="none" name="default_class" />\n				<select data-role="none" name="search_term_verb" />\n				<input data-role="none" type="search" name="term" value="" />\n				<button data-role="none" type="button" title="Add new search row" class="add">+</button>\n			</fieldset>\n			<fieldset class="search row">\n				<button data-role="none" type="button" title="Delete this search row" class="delete">-</button>\n				<select data-role="none" name="default_class" />\n				<select data-role="none" name="search_term_verb" />\n				<input data-role="none" type="search" name="term" value="" />\n				<button data-role="none" type="button" title="Add new search row" class="add">+</button>\n			</fieldset>\n			<fieldset class="search row">\n				<button data-role="none" type="button" title="Delete this search row" class="delete">-</button>\n				<select data-role="none" name="default_class" />\n				<select data-role="none" name="search_term_verb" />\n				<input data-role="none" type="search" name="term" value="" />\n				<button data-role="none" type="button" title="Add new search row" class="add">+</button>\n			</fieldset>\n		</fieldset>\n		</div>\n	</div>\n\n	<div data-role="fieldcontain" class="search filters>\n		<fieldset data-role="controlgroup">\n			<legend>Filter search by</legend>\n			<div class="org_unit_selector" />\n			<label for="search_available">Limit to Available</label>\n			<input type="checkbox" id="search_available" name="available" value="1" />\n			<select name="facets" title="Filter by formats" data-native-menu="false" />\n			<select name="item_type" title="Filter by formats" data-native-menu="false" />\n			<div class="advanced">\n				<select name="language" id="search_languages" multiple size="4" title="Filter by languages" data-native-menu="false" />\n			</div>\n		</fieldset>\n	</div>\n\n	<div data-role="fieldcontain" class="advanced publication year">\n		<fieldset data-role="controlgroup">\n			<legend>Publication Year</legend>\n			<input data-role="none" type="radio" name="pub_year_verb" value="is" checked id="pub_year_is" />\n			<label for="pub_year_is">Is</label>\n			<input data-role="none" type="radio" name="pub_year_verb" value="before" id="pub_year_before" />\n			<label for="pub_year_before">Before</label>\n			<input data-role="none" type="radio" name="pub_year_verb" value="after" id="pub_year_after" />\n			<label for="pub_year_after">After</label>\n			<input data-role="none" type="radio" name="pub_year_verb" value="between" id="pub_year_between" />\n			<label for="pub_year_between">Between</label>\n			<input type="text" name="year_begin" maxlength="4" size="4" />\n			<span class="year_end">and <input name="year_end" maxlength="4" size="4" /></span>\n		</fieldset>\n	</div>\n\n	<div data-role="fieldcontain">\n		<fieldset data-role="controlgroup">\n			<legend>Sort results by</legend>\n			<select name="sort" class="sort_chooser" data-native-menu="false" />\n		</fieldset>\n	</div>\n\n	<div data-role="fieldcontain">\n		<fieldset class="ui-grid-a">\n			<div class="ui-block-a"><button type="reset">Reset</button></div>\n			<div class="ui-block-b"><button type="submit">Search</button></div>\n		</fieldset>\n	</div>\n\n	<input name="offset" value="0" type="hidden" />\n	<input name="limit" value="10" type="hidden" />\n	<input name="visibility_limit" value="1000" type="hidden" />\n	<input name="type" value="advanced" type="hidden" />\n</form>\n\n<div>\n	<select name="search_type" id="search_type_slider" data-role="slider" class="search type">\n		<option value="basic">Advanced Search</option>\n		<option value="advanced">Basic Search</option>\n	</select>\n</div>';
      defaults = {
        default_class: [
          {
            keyword: 'Keyword'
          }, {
            title: 'Title'
          }, {
            author: 'Author'
          }, {
            subject: 'Subject'
          }, {
            series: 'Series'
          }
        ],
        search_term_verb: [
          {
            ' ': 'Contains'
          }, {
            '-': 'Does not contain'
          }, {
            '=': 'Matches exactly'
          }
        ],
        pub_year_verb: [
          {
            'is': 'Is'
          }, {
            before: 'Before'
          }, {
            after: 'After'
          }, {
            between: 'Between'
          }
        ],
        sort: [
          {
            '': 'Relevance'
          }, {
            'pubdate asc': 'Publication date: ascending'
          }, {
            'pubdate desc': 'Publication date: descending'
          }, {
            'title asc': 'Title: ascending'
          }, {
            'title desc': 'Title: descending'
          }, {
            'author asc': 'Author: ascending'
          }, {
            'author desc': 'Author: descending'
          }
        ],
        refresh: []
      };
      settings = {};
      build_options = function() {
        var $options, $sor, n, s, v, x, _i, _len;
        if ($('option', this).length) {
          return;
        }
        $sor = $(this);
        if (x = settings[$sor.prop('name')]) {
          for (_i = 0, _len = x.length; _i < _len; _i++) {
            s = x[_i];
            for (v in s) {
              n = s[v];
              $sor.append($("<option value=\"" + v + "\">" + n + "</option>"));
            }
          }
        }
        $options = $('option', this);
        if ($options.length) {
          $options.first().prop('selected', 'selected');
        } else {
          $sor.remove();
        }
      };
      reset_search_form = function() {
        var $form, $s, s, _i, _len, _ref;
        $form = $('form', this);
        $('input[name="term"]', $form).val('');
        $('input[type=checkbox]:visible:checked', $form).prop('checked', false).checkboxradio('refresh');
        _ref = $('select:visible', $form);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          $s = $(s);
          $s.val($('option:first', $s).val());
          if (!$s.closest('.advanced.search.row').length) {
            $s.selectmenu('refresh');
          }
        }
        $('.year_end:visible', $form).hide();
        $form.closest('.plugin').publish('opac.reset');
      };
      flip_to = function(mode) {
        if (mode === 'advanced') {
          $('.advanced', this).show();
          $('.basic', this).hide();
        } else {
          $('.basic', this).show();
          $('.advanced', this).hide();
        }
        $('input[name=term]', this).first().focus();
        reset_search_form.call(this);
        return false;
      };
      return $.fn.search_bar = function(options) {
        var $form, _ref,
          _this = this;
        this.plugin('basic_search search_bar').empty();
        settings = $.extend({}, defaults, options);
        $form = $(search_form);
        $('.org_unit_selector', $form).ou_tree({
          'all': true,
          'selected': ((_ref = window.query) != null ? _ref.ol : void 0) != null ? null : 'All Libraries',
          'indent': '_ '
        });
        $('select', $form).each(function() {
          return build_options.call(this);
        });
        this.append($form).trigger('create');
        flip_to.call(this, 'basic');
        $('.year_end', this).hide();
        return this.on('change', '.search.type', function(e) {
          return flip_to.call(_this, $(e.target).val());
        }).on('click', 'button.add', function(e) {
          var $p;
          $p = $(e.target).closest('fieldset');
          $p.after($p.clone(true));
          _this.find('select', $p).each(function() {
            return build_options.call(this);
          });
          return false;
        }).on('click', 'button.delete', function(e) {
          var $n, $p;
          $p = $(e.target).closest('fieldset');
          $n = $('div.advanced fieldset.search.row', _this);
          if ($n.length !== 1) {
            $p.remove();
          }
          return false;
        }).on('click', 'input[name=pub_year_verb]', function(e) {
          var $yr_end, between;
          between = $(e.target).val() === 'between';
          $yr_end = $('.year_end', _this);
          if (between) {
            $yr_end.show();
          } else {
            $yr_end.hide();
          }
        }).on('click', 'button[type=reset]', function() {
          return reset_search_form.call(_this);
        }).keyup(function(e) {
          switch (e.keyCode) {
            case 27:
              $('button[type=reset]', _this).click();
          }
          return false;
        }).submit(function() {
          var $this, o, ok, _ref1;
          $this = $(this);
          ok = false;
          $('input[name=term]', $this).each(function() {
            if (this.value) {
              ok = true;
              return false;
            }
          });
          if (!ok) {
            return false;
          }
          o = $this.children('form').serializeObject();
          o.depth = ((_ref1 = $('select[name=org_unit]', $this).find(':selected').text().match(/\_ /g)) != null ? _ref1.length : void 0) || 0;
          $this.publish('opac.search', [o]);
          return false;
        }).subscribe('opac.search', function(o) {
          if (o.default_class !== 'author') {
            return;
          }
          flip_to.call(this, 'basic');
          $('input[name="term"]', this).first().val(o.term);
          return $('select[name="default_class"]', this).first().val(o.default_class).selectmenu('refresh');
        });
      };
    };
    /* Commented out
    		# If there are other plugins publishing on the same channel,
    		# subscribing to the channel will update this search object.
    		.subscribe 'opac.search', (o) ->
    			for x in $(':input', @)
    				n = x.name
    				switch n
    					when 'search', 'offset', 'visibility_limit' then continue
    					when 'item_type' then o.item_type ?= o.item_type.join ''
    				$(x).val o[n] if o[n]
    			$('select', @).each -> $(@).selectmenu 'refresh'
    			$('input[type="checkbox"]', @).each -> $(@).checkboxradio 'refresh'
    			return
    */

  })())(jQuery);
});
