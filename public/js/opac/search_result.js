// Generated by CoffeeScript 1.3.1

define(['eg/eg_api', 'template', 'settings', 'opac/ou_tree', 'plugin', 'opac/cover_art', 'opac/page_bar'], function(eg, _, rc, OU) {
  return (function($) {
    var content, format_callnumber, show_callnumber, show_copy_counts, show_summary_info, title_details, tpl_summary_info, tpl_zero_hits;
    content = '<div id="top_page_bar" class="page_bar"></div>\n<ul data-role="listview" data-inset="true" data-split-icon="gear" class="result_list"></ul>\n<div id="bottom_page_bar" class="page_bar"></div>';
    tpl_summary_info = _.template('<li id="title_id_<%= title_id %>">\n	<a href="#" class="title">\n		<div class="info_box">\n			<h3 class="info_line">\n				<span class="title"></span>\n				<div class="author"></div>\n			</h3>\n			<p>\n				<span title="Publication date" class="pub_date"></span>\n				<span title="Physical description" class="physical"></span>\n				<span title="Format" class="resource_types"></span>\n			</p>\n			<p title="Location and call number of this title" class="callnumber"></p>\n			<p class="copy_counts ui-li-count"><span class="counts_avail"></span> of <span class="counts_total"></span> available</p>\n		</div>\n	</a>\n	<a class="author">Search other titles by this author</a>\n</li>');
    tpl_zero_hits = _.template('<div class="zero_hits">\n	<strong>Sorry, no entries were found for "<%= query %>"</strong>\n</div>');
    show_summary_info = function(mvr) {
      var isbn, _ref;
      if (mvr.title) {
        $('span.title', this).text(mvr.title).prop('title', mvr.title);
      }
      if (mvr.author) {
        $('div.author', this).text(mvr.author).prop('title', mvr.author);
      }
      if (mvr.pubdate) {
        $('.pub_date', this).text(mvr.pubdate);
      }
      if (mvr.physical_description) {
        $('.physical', this).text(mvr.physical_description);
      }
      if (mvr.types_of_resource.length) {
        $('.resource_types', this).text(mvr.types_of_resource.join(', '));
      }
      if (isbn = (_ref = mvr.isbn) != null ? _ref.match(/^(\d+)\D/) : void 0) {
        $('a.title', this).thumbnail_art(isbn[0]);
      }
    };
    show_copy_counts = function(nc, depth) {
      var counts, n, v;
      counts = ((function() {
        var _results;
        _results = [];
        for (n in nc) {
          v = nc[n];
          if (Number(v.depth) === depth) {
            _results.push(v);
          }
        }
        return _results;
      })())[0];
      $('.counts_avail', this).text(counts.available);
      return $('.counts_total', this).text(counts.count);
    };
    format_callnumber = function(cn) {
      return $.trim("" + cn[0] + " " + cn[1] + " " + cn[2]);
    };
    show_callnumber = function(cns) {
      var $cn, cn, first, first_callnumber, ou_name, _i, _j, _k, _len, _len1, _len2;
      $cn = $('.callnumber', this);
      if (cns.length) {
        first = cns[0];
        first_callnumber = format_callnumber(first.callnumber);
        for (_i = 0, _len = cns.length; _i < _len; _i++) {
          cn = cns[_i];
          if (format_callnumber(cn.callnumber) !== first_callnumber) {
            return $cn.text('Multiple locations and call numbers');
          }
        }
        ou_name = OU.id_name(first.org_id);
        for (_j = 0, _len1 = cns.length; _j < _len1; _j++) {
          cn = cns[_j];
          if (OU.id_name(cn.org_id) !== ou_name) {
            return $cn.text("" + first.copylocation + " / " + first_callnumber);
          }
        }
        for (_k = 0, _len2 = cns.length; _k < _len2; _k++) {
          cn = cns[_k];
          if (cn.copylocation !== first.copylocation) {
            return $cn.text("" + first_callnumber);
          }
        }
        return $cn.text("" + ou_name + " / " + first.copylocation + " / " + first_callnumber);
      }
    };
    title_details = function($el) {
      var c, m, _i, _len, _ref;
      while ($el.length > 0) {
        _ref = ($el.prop('id') || '').split(' ');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (m = c.match(/^title_id_(\d+)/)) {
            return [Number(m[1]), $('img', $el).clone(), 1 + $('li').index($el)];
          }
        }
        $el = $el.parent();
      }
      return [null, null, null];
    };
    return $.fn.search_result = function() {
      var current_depth, current_location, current_name, current_type, maxTab, trySearching,
        _this = this;
      current_location = '';
      current_name = '';
      current_depth = '';
      current_type = '';
      maxTab = 0;
      this.plugin('search_settings').jqmData('settings', {
        default_class: 'keyword',
        term: '',
        item_type: '',
        limit: 10,
        visibility_limit: 1000,
        offset: 0,
        sort: '',
        sort_dir: 'asc',
        depth: 0,
        org_unit: 1
      });
      trySearching = function(request, direction) {
        var $this;
        if (this.length && JSON.stringify(request) === JSON.stringify(this.jqmData('request'))) {
          return;
        }
        this.jqmData('request', request);
        $this = this.html(content);
        return this.openils('search results', 'search', request, function(result) {
          var $img, $li, $result_list, id, n, ou_id, posn, title_id, _fn, _i, _len, _ref, _ref1;
          this.jqmData('result', result);
          this.publish('opac.result', [result]);
          if (result.count === 0) {
            this.append(tpl_zero_hits({
              query: result.query
            }));
            if (rc.search_tips) {
              this.append(rc.search_tips);
            }
            return;
          }
          $('#top_page_bar, #bottom_page_bar', this).page_bar({
            request: request,
            result: result
          });
          $result_list = $('.result_list', this).listview();
          ou_id = Number(request.org_unit);
          n = 0;
          _ref = result.ids;
          _fn = function(title_id, n) {
            var $x;
            $x = $("#title_id_" + title_id);
            /*
            						# This sequence populates the areas as soon as each ajax call is completed.
            						$x.openils 'title info', 'search.biblio.record.mods_slim.retrieve', title_id
            						, (mvr) ->
            							return unless mvr
            							show_summary_info.call @, mvr
            							$result_list.listview 'refresh'
            
            						$x.openils 'title availability', 'search.biblio.record.copy_count',
            							id: title_id
            							location: ou_id
            						, (nc) ->
            							return unless nc
            							show_copy_counts.call @, nc, request.depth
            							$result_list.listview 'refresh'
            
            						$x.openils 'call numbers', 'search.biblio.copy_location_counts.summary.retrieve',
            							id: title_id
            							org_id: ou_id
            							depth: request.depth
            						, (cns) ->
            							return unless cns
            							show_callnumber.call @, cns, x.ou_tree
            							$result_list.listview 'refresh'
            */

            return $x.parallel("title ID#" + title_id, {
              mvr: eg.openils('search.biblio.record.mods_slim.retrieve', title_id),
              nc: eg.openils('search.biblio.record.copy_count', {
                id: title_id,
                location: ou_id
              }),
              cns: eg.openils('search.biblio.copy_location_counts.summary.retrieve', {
                id: title_id,
                org_id: ou_id,
                depth: request.depth
              })
            }, function(y) {
              if (y.mvr) {
                show_summary_info.call(this, y.mvr);
              }
              if (y.nc) {
                show_copy_counts.call(this, y.nc, request.depth);
              }
              if (y.cns) {
                show_callnumber.call(this, y.cns);
              }
              return $result_list.listview('refresh');
            });
          };
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            title_id = _ref[_i];
            if (maxTab < ++n) {
              maxTab = n;
            }
            $result_list.append(tpl_summary_info({
              title_id: title_id
            }));
            _fn(title_id, n);
          }
          $('a.title:first', $result_list).focus();
          $li = (function() {
            switch (direction) {
              case +1:
                return $this.find('li').first();
              case -1:
                return $this.find('li').last();
              default:
                return $();
            }
          })();
          _ref1 = title_details($li), id = _ref1[0], $img = _ref1[1], posn = _ref1[2];
          if (id && request) {
            posn += Number(request.offset);
            $this.publish('opac.title_details', [result.count, posn, id, $img]);
            $this.publish('opac.title_holdings', [id, request.org_unit, request.depth]);
          }
          return false;
        });
      };
      this.on('keyup', '.title, .author', function(e) {
        switch (e.keyCode) {
          case 13:
            $(this).click();
        }
        return false;
      });
      this.on('click', 'li', function(e) {
        var $img, id, posn, request, result, _ref;
        request = _this.jqmData('request');
        result = _this.jqmData('result');
        _ref = title_details($(e.currentTarget)), id = _ref[0], $img = _ref[1], posn = _ref[2];
        if (id && request) {
          require(['login_window', 'opac/edit_hold'], function() {
            $('#edit_hold').edit_hold();
            $('#login_window').login_window();
            posn += Number(request.offset);
            _this.publish('opac.title_details', [result.count, posn, id, $img]);
            return _this.publish('opac.title_holdings', [id, request.org_unit, request.depth]);
          });
        }
        return false;
      });
      this.subscribe('opac.title', function(title_id, direction) {
        var $img, $li, $this_title, actual, id, limit, offset, posn, request, result, total, _ref;
        request = this.jqmData('request');
        result = this.jqmData('result');
        total = result.count;
        actual = result.ids.length;
        offset = Number(request.offset);
        limit = Number(request.limit);
        $this_title = $("#title_id_" + title_id, this);
        if (!$this_title) {
          return false;
        }
        $this_title = (function() {
          switch (direction) {
            case +1:
              if (!($li = $this_title.next()).length) {
                if ((offset + limit) < total) {
                  trySearching.call(this, $.extend({}, request, {
                    offset: offset + limit
                  }), direction);
                }
              }
              return $li;
            case -1:
              if (!($li = $this_title.prev()).length) {
                if (0 <= (offset - limit)) {
                  trySearching.call(this, $.extend({}, request, {
                    offset: offset - limit
                  }), direction);
                }
              }
              return $li;
            default:
              return $();
          }
        }).call(this);
        _ref = title_details($this_title), id = _ref[0], $img = _ref[1], posn = _ref[2];
        if (id && request) {
          posn += offset;
          this.publish('opac.title_details', [result.count, posn, id, $img]);
          this.publish('opac.title_holdings', [id, request.org_unit, request.depth]);
        }
        return false;
      });
      this.on('click', 'a.author', function(e) {
        var author, request;
        request = _this.jqmData('request');
        author = $('div.author', $(e.currentTarget).closest('li')).text();
        if (author && request) {
          request = $.extend({}, request, {
            default_class: 'author',
            term: author,
            offset: '0',
            type: 'advanced'
          });
          _this.publish('opac.search', [request]);
          trySearching.call(_this, request);
        }
        return false;
      });
      this.subscribe('opac.search', trySearching);
      this.subscribe('opac.ou', function(ou) {
        var request;
        $.pushState({
          library: JSON.stringify([ou.id, ou.name, ou.depth, ou.type])
        });
        current_location = ou.id;
        current_name = ou.name;
        current_depth = ou.depth;
        current_type = ou.type;
        if (!this.is(':visible')) {
          return false;
        }
        if (request = this.jqmData('request')) {
          request = $.extend({}, request, {
            org_unit: ou.id,
            org_name: ou.name,
            depth: ou.depth,
            org_type: ou.type
          });
          this.publish('opac.search', [request]);
        }
        return false;
      });
      this.subscribe('opac.reset', function() {
        return this.empty();
      });
      return this.refresh(function() {
        return false;
      });
    };
  })(jQuery);
});
