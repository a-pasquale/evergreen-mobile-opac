// Generated by CoffeeScript 1.3.1

define(['eg/eg_api', 'opac/ou_tree', 'plugin'], function(eg, OU) {
  return (function($) {
    return $.fn.hold_details = function(hold) {
      var $form, hide_form, place_hold,
        _this = this;
      $form = $('<form class="place_hold" data-ajax="false">\n	<!--div data-role="fieldcontain">\n		<label for="edit_hold_org_unit">Hold a copy of this title at</label>\n		<span id="edit_hold_org_unit" class="org_unit_selector"></span>\n	</div-->\n	<fieldset class="ui-grid-a">\n		<div class="ui-block-a"><a href="#" data-role="button" data-rel="back" class="reset">Cancel</a></div>\n		<div class="ui-block-b"><a href="#" data-role="button" data-rel="back" class="submit">Place Hold</a></div>\n	</fieldset>\n</form>');
      hide_form = function() {
        return false;
      };
      place_hold = function() {
        var _this = this;
        if (hold.id) {
          eg.openils('circ.hold.update', hold, function(result) {
            var ok;
            if (ok = typeof result !== 'object') {
              _this.publish('notice', ['Hold updated']);
              return _this.publish('account.holds_summary', [hold.id]);
            } else {
              return _this.publish('prompt', ['Hold update failed', "" + result[0].desc]);
            }
          });
        } else {
          eg.openils('circ.title_hold.is_possible', hold, function(possible) {
            var force, reason, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
            if ((possible != null ? possible.success : void 0) || (force = possible != null ? possible.place_unfillable : void 0)) {
              if (force) {
                reason = "The requested hold cannot currently be filled.\n(" + ((possible != null ? (_ref = possible.last_event) != null ? _ref.desc : void 0 : void 0) || (possible != null ? (_ref1 = possible.last_event) != null ? _ref1.textcode : void 0 : void 0)) + ")\nAutomatically forcing the hold request\nsince you have permission to create the hold.";
                _this.publish('prompt', ['Hold request failed', reason]);
              }
              hold.selection_depth = possible.depth;
              return eg.openils('circ.holds.create', hold, function(result) {
                var ok;
                if (ok = typeof result !== 'object') {
                  _this.publish('notice', ['Hold created']);
                  return _this.publish('account.holds_summary', [hold]);
                } else {
                  return _this.publish('prompt', ['Hold request failed', "" + result[0].desc]);
                }
              });
            } else if (possible != null ? possible.place_unfillable : void 0) {
              reason = "The requested hold cannot currently be filled.\n(" + ((possible != null ? (_ref2 = possible.last_event) != null ? _ref2.desc : void 0 : void 0) || (possible != null ? (_ref3 = possible.last_event) != null ? _ref3.textcode : void 0 : void 0)) + ")\nYou have permission to create the hold anyway,\nbut should only do so if you believe the hold will eventually be filled.\nWould you like to create the hold?";
              return _this.publish('prompt', ['Hold request failed', reason]);
            } else {
              reason = "This title is not eligible for a hold.\n(" + ((possible != null ? (_ref4 = possible.last_event) != null ? _ref4.desc : void 0 : void 0) || (possible != null ? (_ref5 = possible.last_event) != null ? _ref5.textcode : void 0 : void 0)) + ")";
              return _this.publish('prompt', ['Hold request failed', reason]);
            }
          });
        }
        return false;
      };
      this.html($form).trigger('create');
      $('a.submit', this).bind('click', function() {
        return place_hold.call(_this);
      });
      this.on('keyup', 'form.place_hold', function(e) {
        switch (e.keyCode) {
          case 27:
            hide_form.call(_this);
        }
        return false;
      });
      return this.on('keyup', 'button', function(e) {
        var $target;
        switch (e.keyCode) {
          case 27:
            hide_form.call(_this);
        }
        switch (e.keyCode) {
          case 13:
            $target = $(e.target);
            switch ($target) {
              case $target.is('[type=reset]'):
                hide_form.call(_this);
                break;
              case $target.is('[type=submit]'):
                place_hold.call(_this);
            }
        }
        return false;
      });
    };
  })(jQuery);
});
